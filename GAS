 function myArray(){
    let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("配列練習用");

    let data = [
      ["Hello GAS","Hello GAS","Hello GAS"],
      ["Hello GAS","Hello GAS","Hello GAS"],
      ["Hello GAS","Hello GAS","Hello GAS"],
      ];
    sheet.getRange(3,2,data.length,data[0].length).setValues(data);
  }

★↑ sheet.getRange(3,2,data.length,data[0].length).setValues(data);
3，2は開始位置（3行目の2列目から始める）　data.lengthはdata配列の個数["Hello GAS","Hello GAS","Hello GAS"]が3つあるので3
data[0].lengthはdata配列のindex0つまり["Hello GAS","Hello GAS","Hello GAS"]の中身の個数なので3
setValues(data)はdata配列をセットして下さい、の意味　つまり
３行目2列目から初めて3行、3列にdata配列をセットして下さいの意味


★売上集計
function summaryStoreSales(){
  let stores = {
    "店舗A":"1VQBhDVmRtW-gNZdznjsQU_qpXaLgnyCDDJ0xTAp4feI",
    "店舗B":"1_FVflQ1ePhb0NNwEq7uUsFD1liOdI0zcoHDmCdgVrEU",
    "店舗C":"1YC9xkbxXP-a9lLWHICAbsry6j12VmNCOoCU3ZPY_fd0",
  };

  let sales = [];

  sales.push(["店舗名","金額"]);

  for(let store in stores){

    let sheet = SpreadsheetApp.openById(stores[store]).getSheetByName("1月");
    let range = sheet.getRange(2,5,sheet.getLastRow()-1);
    let values = range.getValues().flat();

    let total = values.reduce(function(sum,element){
      return sum + element;
    },0);

    sales.push([store,total]);
  }
    let summarySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("店舗別売上");
    summarySheet.clear();
    summarySheet.getRange(1,1,sales.length,sales[0].length).setValues(sales);

  }

★★★
for (let 〇　in ◇)について
for (let 〇 in ◇) という構文では、◇ がオブジェクトの場合、そのオブジェクトのキーだけが 〇 に格納されます。

★★★
reduce()の使い方

配列 = [1,2,3,4,5];
配列.reduce(function(貯まった値,今の値){
return 何かの処理;
},初期値};

★合計を求める

let numbers = [5, 10, 15, 20, 25];

let total = numbers.reduce(function(sum, element) {
  return sum + element; 
}, 0);

console.log(total); // 期待される出力: 75

★最大値（最小値）を求める

let numbers = [3, 17, 9, 24, 15];

let max = numbers.reduce(function(maxValue, element) {
  return element > maxValue ? element : maxValue; // 大きい方を maxValue に残す(値の更新)
}, numbers[0]); // 初期値は最初の要素（3）

console.log(max); // 期待される出力: 24

element > maxValue ? element : maxValue; ここは三項演算子という構文
条件式 ? 条件が真の場合の値 : 条件が偽の場合の値;

★配列の中の文字列を1つにまとめる

let words = ["Hello", "world", "this", "is", "JavaScript"];

let result = words.reduce(function(accumulator,currentValue){
  return accumulator + " " + currentValue;
}," ");

console.log(result);//出力: "HelloworldthisisJavaScript"

★配列の中身の平均を求める
let scores = [80, 90, 100, 70, 85];

let total = scores.reduce(function(num,element){
  return sum + element;
},0);

let average = total / scores.length;

console.log(average);

★オブジェクトの合計を求める

let salesData = [
  { store: "店舗A", sales: 100 },
  { store: "店舗B", sales: 200 },
  { store: "店舗C", sales: 150 }
];

let totalSales = salesData.reduce(function(sum,element){

  return sum + element.sales;//処理中の要素（オブジェクト）の値
},0);

★★★★★★★
店舗別集計
★★★★★★★

function totalWorkingHours() {
  let stores = {
    "東京支店":"1b3Vm6ZVTKJiNYVaQywicgz9fPw-VsIeDCay5jwj4WqM",
    "大阪支店":"1fIg6asrMjtUxbluqje9WclQL0mFKBvsXjn50hY-T7cU",
    "名古屋支店":"1zbn8R9txHI9yxonl-ON1_H8WkS2d3x4ZGvkcb4bGyUw",
  };

  let workingHours = [];

  workingHours.push(["店舗名","労働時間"]);

 for ( let store in stores){
  let sheet = SpreadsheetApp.openById(stores[store]).getSheetByName("1月");
  let range = sheet.getRange(1,2,sheet.getLastRow());
  let values = range.getValues().flat();

  let total = values.reduce(function(sum,element){
    return sum + element;
  },0);

  workingHours.push([store,total]);
 } 

 let summarySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("店舗別労働時間");
 summarySheet.clear();
 summarySheet.getRange(1,1,workingHours.length,workingHours[0].length).setValues(workingHours);
  
}

★★上にエラーハンドリンクを追加★★

function totalWorkingHours() {
  let stores = {
    "東京支店": "1b3Vm6ZVTKJiNYVaQywicgz9fPw-VsIeDCay5jwj4WqM",
    "大阪支店": "1fIg6asrMjtUxbluqje9WclQL0mFKBvsXjn50hY-T7cU",
    "名古屋支店": "1zbn8R9txHI9yxonl-ON1_H8WkS2d3x4ZGvkcb4bGyUw",
  };

  let workingHours = [["店舗名", "労働時間"]];

  for (let store in stores) {
    try {
      let sheet = SpreadsheetApp.openById(stores[store]).getSheetByName("1月");
      if (!sheet) {
        Logger.log(store + "の1月シートが見つかりません。");
        continue;
      }
      let range = sheet.getRange(1, 2, sheet.getLastRow());
      let values = range.getValues().flat();

      let total = values.reduce((sum, element) => {
        let num = Number(element);
        if (isNaN(num)) {
          Logger.log(store + "の労働時間データに数値以外の値が含まれています: " + element);
          return sum;
        }
        return sum + num;
      }, 0);

      workingHours.push([store, total]);
    } catch (e) {
      Logger.log(store + "の処理中にエラーが発生しました: " + e);
    }
  }

  let ss = SpreadsheetApp.getActiveSpreadsheet();
  let summarySheet = ss.getSheetByName("店舗別労働時間");
  if (!summarySheet) {
    summarySheet = ss.insertSheet("店舗別労働時間");
  }
  summarySheet.clearContents();
  summarySheet.getRange(1, 1, workingHours.length, workingHours[0].length).setValues(workingHours);
}

★★★★★★
課題：店舗別の売上表から特定の商品の売上をスプレッドシートで自動集計しよう（chatちゃんが作ってくれた課題）

function salesOfItem() {
  let stores = {
    "店舗A": "12chJ9jc1P5U0Uq8Vf21XpNn81AwAEstTedHzruQz3bc",
    "店舗B": "19jMf5ntlKY_r7hT9WQGPW-9mR7Ibh7KzhxU0pgNIi08",
    "店舗C": "16yxhdi1XzhIf5oBb6imOZFyKbuqYosawlmZ1u-7cz1w",
  };

  let sales = [["店舗名", "商品名", "金額"]];
  let targetItem = "車"; // 集計対象の商品名

  for (let store in stores) {
    let sheet = SpreadsheetApp.openById(stores[store]).getSheetByName("1月");
    let range = sheet.getRange(2, 1, sheet.getLastRow() - 1, 4);
    let values = range.getValues(); // 二次元配列を取得 ⇚ここでflatを使わない。

    let total = 0;
    for (let i = 0; i < values.length; i++) {
      if (values[i][0] === targetItem) { // 商品名が一致する場合
        total += values[i][3]; // 金額を加算
      }
    }

    sales.push([store, targetItem, total]);
  }

  let summarySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("特定商品の売上");
  summarySheet.clearContents(); // clearContents()を使用
  summarySheet.getRange(1, 1, sales.length, sales[0].length).setValues(sales);
}



